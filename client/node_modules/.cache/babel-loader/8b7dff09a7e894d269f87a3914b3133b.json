{"ast":null,"code":"var _jsxFileName = \"/Users/yeoungseurkang/projects/node/dwitter/client/src/components/Tweets.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { memo, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Banner from './Banner';\nimport NewTweetForm from './NewTweetForm';\nimport TweetCard from './TweetCard';\nimport { useAuth } from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Tweets = /*#__PURE__*/memo(_c = _s(({\n  tweetService,\n  username,\n  addable\n}) => {\n  _s();\n\n  const [tweets, setTweets] = useState([]);\n  const [error, setError] = useState('');\n  const history = useHistory();\n  const {\n    user\n  } = useAuth();\n  useEffect(() => {\n    tweetService.getTweets(username).then(tweets => setTweets([...tweets])).catch(onError);\n  }, [tweetService, username, user]);\n\n  const onCreated = tweet => {\n    setTweets(tweets => [tweet, ...tweets]);\n  };\n\n  const onDelete = tweetId => tweetService.deleteTweet(tweetId).then(() => setTweets(tweets => tweets.filter(tweet => tweet.id !== tweetId))).catch(error => setError(error.toString()));\n\n  const onUpdate = (tweetId, text) => tweetService.updateTweet(tweetId, text).then(updated => setTweets(tweets => tweets.map(item => item.id === updated.id ? updated : item))).catch(error => error.toString());\n\n  const onUsernameClick = tweet => history.push(`/${tweet.username}`);\n\n  const onError = error => {\n    setError(error.toString());\n    setTimeout(() => {\n      setError('');\n    }, 3000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [addable && /*#__PURE__*/_jsxDEV(NewTweetForm, {\n      tweetService: tweetService,\n      onError: onError,\n      onCreated: onCreated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 17\n    }, this), error && /*#__PURE__*/_jsxDEV(Banner, {\n      text: error,\n      isAlert: true,\n      transient: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 23\n    }, this), tweets.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"tweets-empty\",\n      children: \"No Tweets Yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"tweets\",\n      children: tweets.map(tweet => /*#__PURE__*/_jsxDEV(TweetCard, {\n        tweet: tweet,\n        owner: tweet.username === user.username,\n        onDelete: onDelete,\n        onUpdate: onUpdate,\n        onUsernameClick: onUsernameClick\n      }, tweet.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}, \"E9YcZYjR0TGX4AVylP/JikZJs2Q=\", false, function () {\n  return [useHistory, useAuth];\n}));\n_c2 = Tweets;\nexport default Tweets;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tweets$memo\");\n$RefreshReg$(_c2, \"Tweets\");","map":{"version":3,"sources":["/Users/yeoungseurkang/projects/node/dwitter/client/src/components/Tweets.jsx"],"names":["React","memo","useEffect","useState","useHistory","Banner","NewTweetForm","TweetCard","useAuth","Tweets","tweetService","username","addable","tweets","setTweets","error","setError","history","user","getTweets","then","catch","onError","onCreated","tweet","onDelete","tweetId","deleteTweet","filter","id","toString","onUpdate","text","updateTweet","updated","map","item","onUsernameClick","push","setTimeout","length"],"mappings":"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","sourcesContent":["import React, { memo, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport Banner from './Banner';\nimport NewTweetForm from './NewTweetForm';\nimport TweetCard from './TweetCard';\nimport { useAuth } from '../context/AuthContext';\n\nconst Tweets = memo(({ tweetService, username, addable }) => {\n    const [tweets, setTweets] = useState([]);\n    const [error, setError] = useState('');\n    const history = useHistory();\n    const { user } = useAuth();\n\n    useEffect(() => {\n        tweetService\n            .getTweets(username)\n            .then((tweets) => setTweets([...tweets]))\n            .catch(onError);\n    }, [tweetService, username, user]);\n\n    const onCreated = (tweet) => {\n        setTweets((tweets) => [tweet, ...tweets]);\n    };\n\n    const onDelete = (tweetId) =>\n        tweetService\n            .deleteTweet(tweetId)\n            .then(() =>\n                setTweets((tweets) =>\n                    tweets.filter((tweet) => tweet.id !== tweetId),\n                ),\n            )\n            .catch((error) => setError(error.toString()));\n\n    const onUpdate = (tweetId, text) =>\n        tweetService\n            .updateTweet(tweetId, text)\n            .then((updated) =>\n                setTweets((tweets) =>\n                    tweets.map((item) =>\n                        item.id === updated.id ? updated : item,\n                    ),\n                ),\n            )\n            .catch((error) => error.toString());\n\n    const onUsernameClick = (tweet) => history.push(`/${tweet.username}`);\n\n    const onError = (error) => {\n        setError(error.toString());\n        setTimeout(() => {\n            setError('');\n        }, 3000);\n    };\n\n    return (\n        <>\n            {addable && (\n                <NewTweetForm\n                    tweetService={tweetService}\n                    onError={onError}\n                    onCreated={onCreated}\n                />\n            )}\n            {error && <Banner text={error} isAlert={true} transient={true} />}\n            {tweets.length === 0 && (\n                <p className=\"tweets-empty\">No Tweets Yet</p>\n            )}\n            <ul className=\"tweets\">\n                {tweets.map((tweet) => (\n                    <TweetCard\n                        key={tweet.id}\n                        tweet={tweet}\n                        owner={tweet.username === user.username}\n                        onDelete={onDelete}\n                        onUpdate={onUpdate}\n                        onUsernameClick={onUsernameClick}\n                    />\n                ))}\n            </ul>\n        </>\n    );\n});\nexport default Tweets;\n"]},"metadata":{},"sourceType":"module"}