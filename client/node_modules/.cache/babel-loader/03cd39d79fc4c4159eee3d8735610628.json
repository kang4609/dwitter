{"ast":null,"code":"export default class TweetService {\n  constructor(http) {\n    this.tweets = [{\n      id: 1,\n      text: '드림코딩에서 강의 들으면 너무 좋으다',\n      createdAt: '2021-05-09T04:20:57.000Z',\n      name: 'Bob',\n      username: 'bob',\n      url: 'https://widgetwhats.com/app/uploads/2019/11/free-profile-photo-whatsapp-1.png'\n    }];\n    this.http = http;\n  }\n\n  async getTweets(username) {\n    const query = username ? `?username=${username}` : '';\n    return this.http.fetch(`/tweets${query}`, {\n      method: 'GET'\n    });\n  }\n\n  async postTweet(text) {\n    return await this.http.fetch(`tweets`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text,\n        username: 'ellie',\n        name: 'test222'\n      })\n    });\n    const data = await response.json();\n\n    if (response.status !== 201) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n  async deleteTweet(tweetId) {\n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (response.status !== 204) {\n      throw new Error();\n    }\n  }\n\n  async updateTweet(tweetId, text) {\n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text\n      })\n    });\n    const data = await response.json();\n\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n}","map":{"version":3,"sources":["/Users/yeoungseurkang/projects/node/dwitter/client/src/service/tweet.js"],"names":["TweetService","constructor","http","tweets","id","text","createdAt","name","username","url","getTweets","query","fetch","method","postTweet","headers","body","JSON","stringify","data","response","json","status","Error","message","deleteTweet","tweetId","baseURL","updateTweet"],"mappings":"AAAA,eAAe,MAAMA,YAAN,CAAmB;AAW9BC,EAAAA,WAAW,CAACC,IAAD,EAAO;AAAA,SAVlBC,MAUkB,GAVT,CACL;AACIC,MAAAA,EAAE,EAAE,CADR;AAEIC,MAAAA,IAAI,EAAE,sBAFV;AAGIC,MAAAA,SAAS,EAAE,0BAHf;AAIIC,MAAAA,IAAI,EAAE,KAJV;AAKIC,MAAAA,QAAQ,EAAE,KALd;AAMIC,MAAAA,GAAG,EAAE;AANT,KADK,CAUS;AACd,SAAKP,IAAL,GAAYA,IAAZ;AACH;;AAEc,QAATQ,SAAS,CAACF,QAAD,EAAW;AACtB,UAAMG,KAAK,GAAGH,QAAQ,GAAI,aAAYA,QAAS,EAAzB,GAA6B,EAAnD;AACA,WAAO,KAAKN,IAAL,CAAUU,KAAV,CAAiB,UAASD,KAAM,EAAhC,EAAmC;AACtCE,MAAAA,MAAM,EAAE;AAD8B,KAAnC,CAAP;AAGH;;AAEc,QAATC,SAAS,CAACT,IAAD,EAAO;AAClB,WAAO,MAAM,KAAKH,IAAL,CAAUU,KAAV,CAAiB,QAAjB,EAA0B;AACnCC,MAAAA,MAAM,EAAE,MAD2B;AAEnCE,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAF0B;AAGnCC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEb,QAAAA,IAAF;AAAQG,QAAAA,QAAQ,EAAE,OAAlB;AAA2BD,QAAAA,IAAI,EAAE;AAAjC,OAAf;AAH6B,KAA1B,CAAb;AAMA,UAAMY,IAAI,GAAG,MAAMC,QAAQ,CAACC,IAAT,EAAnB;;AACA,QAAID,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AACzB,YAAM,IAAIC,KAAJ,CAAUJ,IAAI,CAACK,OAAf,CAAN;AACH;;AACD,WAAOL,IAAP;AACH;;AAEgB,QAAXM,WAAW,CAACC,OAAD,EAAU;AACvB,UAAMN,QAAQ,GAAG,MAAMR,KAAK,CAAE,GAAE,KAAKe,OAAQ,WAAUD,OAAQ,EAAnC,EAAsC;AAC9Db,MAAAA,MAAM,EAAE,QADsD;AAE9DE,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB;AAFqD,KAAtC,CAA5B;;AAKA,QAAIK,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AACzB,YAAM,IAAIC,KAAJ,EAAN;AACH;AACJ;;AAEgB,QAAXK,WAAW,CAACF,OAAD,EAAUrB,IAAV,EAAgB;AAC7B,UAAMe,QAAQ,GAAG,MAAMR,KAAK,CAAE,GAAE,KAAKe,OAAQ,WAAUD,OAAQ,EAAnC,EAAsC;AAC9Db,MAAAA,MAAM,EAAE,KADsD;AAE9DE,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFqD;AAG9DC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEb,QAAAA;AAAF,OAAf;AAHwD,KAAtC,CAA5B;AAMA,UAAMc,IAAI,GAAG,MAAMC,QAAQ,CAACC,IAAT,EAAnB;;AACA,QAAID,QAAQ,CAACE,MAAT,KAAoB,GAAxB,EAA6B;AACzB,YAAM,IAAIC,KAAJ,CAAUJ,IAAI,CAACK,OAAf,CAAN;AACH;;AACD,WAAOL,IAAP;AACH;;AA3D6B","sourcesContent":["export default class TweetService {\n    tweets = [\n        {\n            id: 1,\n            text: '드림코딩에서 강의 들으면 너무 좋으다',\n            createdAt: '2021-05-09T04:20:57.000Z',\n            name: 'Bob',\n            username: 'bob',\n            url: 'https://widgetwhats.com/app/uploads/2019/11/free-profile-photo-whatsapp-1.png',\n        },\n    ];\n    constructor(http) {\n        this.http = http;\n    }\n\n    async getTweets(username) {\n        const query = username ? `?username=${username}` : '';\n        return this.http.fetch(`/tweets${query}`, {\n            method: 'GET',\n        });\n    }\n\n    async postTweet(text) {\n        return await this.http.fetch(`tweets`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ text, username: 'ellie', name: 'test222' }),\n        });\n\n        const data = await response.json();\n        if (response.status !== 201) {\n            throw new Error(data.message);\n        }\n        return data;\n    }\n\n    async deleteTweet(tweetId) {\n        const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n            method: 'DELETE',\n            headers: { 'Content-Type': 'application/json' },\n        });\n\n        if (response.status !== 204) {\n            throw new Error();\n        }\n    }\n\n    async updateTweet(tweetId, text) {\n        const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ text }),\n        });\n\n        const data = await response.json();\n        if (response.status !== 200) {\n            throw new Error(data.message);\n        }\n        return data;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}