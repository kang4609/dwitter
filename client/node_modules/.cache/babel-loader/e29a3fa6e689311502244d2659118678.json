{"ast":null,"code":"export default class TweetService {\n  constructor(baseURL) {\n    this.tweets = [{\n      id: 1,\n      text: '드림코딩에서 강의 들으면 너무 좋으다',\n      createdAt: '2021-05-09T04:20:57.000Z',\n      name: 'Bob',\n      username: 'bob',\n      url: 'https://widgetwhats.com/app/uploads/2019/11/free-profile-photo-whatsapp-1.png'\n    }];\n    this.baseURL = baseURL;\n  }\n\n  async getTweets(username) {\n    const query = username ? `?username=${username}` : '';\n    const response = await fetch(`${this.baseURL}/tweets${query}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n  async postTweet(text) {\n    const response = await fetch(`${this.baseURL}/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text,\n        username: 'ellie',\n        name: 'test222'\n      })\n    });\n    const data = await response.json();\n\n    if (response.status !== 201) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n  async deleteTweet(tweetId) {\n    const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await response.json();\n\n    if (response.status !== 204) {\n      throw new Error(data.message);\n    }\n  }\n\n  async updateTweet(tweetId, text) {\n    const response = await fetch(`${this.baseURL}/${tweetId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text\n      })\n    });\n    const data = await response.json();\n\n    if (response.status !== 200) {\n      throw new Error(data.message);\n    }\n\n    return data;\n  }\n\n}","map":{"version":3,"sources":["/Users/yeoungseurkang/projects/node/dwitter/client/src/service/tweet.js"],"names":["TweetService","constructor","baseURL","tweets","id","text","createdAt","name","username","url","getTweets","query","response","fetch","method","headers","data","json","status","Error","message","postTweet","body","JSON","stringify","deleteTweet","tweetId","updateTweet"],"mappings":"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","sourcesContent":["export default class TweetService {\n    tweets = [\n        {\n            id: 1,\n            text: '드림코딩에서 강의 들으면 너무 좋으다',\n            createdAt: '2021-05-09T04:20:57.000Z',\n            name: 'Bob',\n            username: 'bob',\n            url: 'https://widgetwhats.com/app/uploads/2019/11/free-profile-photo-whatsapp-1.png',\n        },\n    ];\n    constructor(baseURL) {\n        this.baseURL = baseURL;\n    }\n\n    async getTweets(username) {\n        const query = username ? `?username=${username}` : '';\n        const response = await fetch(`${this.baseURL}/tweets${query}`, {\n            method: 'GET',\n            headers: { 'Content-Type': 'application/json' },\n        });\n\n        const data = await response.json();\n        if (response.status !== 200) {\n            throw new Error(data.message);\n        }\n        return data;\n    }\n\n    async postTweet(text) {\n        const response = await fetch(`${this.baseURL}/`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ text, username: 'ellie', name: 'test222' }),\n        });\n\n        const data = await response.json();\n        if (response.status !== 201) {\n            throw new Error(data.message);\n        }\n        return data;\n    }\n\n    async deleteTweet(tweetId) {\n        const response = await fetch(`${this.baseURL}/tweets/${tweetId}`, {\n            method: 'DELETE',\n            headers: { 'Content-Type': 'application/json' },\n        });\n\n        const data = await response.json();\n        if (response.status !== 204) {\n            throw new Error(data.message);\n        }\n    }\n\n    async updateTweet(tweetId, text) {\n        const response = await fetch(`${this.baseURL}/${tweetId}`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ text }),\n        });\n\n        const data = await response.json();\n        if (response.status !== 200) {\n            throw new Error(data.message);\n        }\n        return data;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}